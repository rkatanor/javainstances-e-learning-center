<!DOCTYPE html>
<html>
<head>
<style>
article {
    margin-left: 170px;
    border-left: 1px solid gray;
    padding: 1em;
    overflow: hidden;
   
}
</style>
</head>
<body>
<jsp:include page="header.jsp"></jsp:include>
<article>
  <h1><center>Java Native Interface</center></h1>
  
  <pre>
<h3>
The Java Native Interface (JNI) is a programming framework that enables Java code running 
in a Java Virtual Machine (JVM) to call and be called by[1] native applications (programs specific to a 
hardware and operating system platform) and libraries written in other languages such as C, C++ and assembly.

POC:

public class TestDLL
{
private native String getMsg(); // native method
static
{
System.loadLibrary(TestDLL); // load dll file
}
public static void main(String ars[])
{
System.out.println(new TestDLL.getMsg()); // Access the method of dll file
}
}
 

Compile java file:

 
javac TestDLL.java
Create an c header file using javah as follows:

Javah jni TestDLL
/* DO NOT EDIT THIS FILE it is machine generated */
#include <jni.h>
/* Header for class TestDLL */
#ifndef _Included_TestDLL
#define _Included_TestDLL
#ifdef __cplusplus
extern C {
#endif
/*
*Class: TestDLL
*Method: getMsg
*Signature: ()Ljava/lang/String;
*/
JNIEXPORT jstring JNICALL Java_TestDLL_getMsg
(JNIEnv *,jobject);
#ifdef cplusplus
}
#endif
#endif
How to call a C program from Java?

Calling a C program may be useful when we prefer to use C libraries and to reuse an existing C program.
 When we compile a C program, the source gets converted to obj file. It is a platform dependent intermediate 
 machine code which will be converted to exe and then executed.

Java native interface (JNI) is a framework provided by java that enables java programs to call native code and vice-versa.

Using JNI a java program has the capability to call the native C code. But we lose the core objective of java 
which is platform independence. So calling a C program from java should be used judiciously.

JNI provides the specification and native code should be written/ported accordingly. 
JDK vendor should provide the needed implementation for the JNI.

Steps to call a C program from Java

1. Write the Java Program and Compile
2. Generate header file from java class
3. Write the C Program
4. Generate Shared Library File
5. Run Java Program

1. Write the Java Program

public class JavaToC {

    public native void helloC();

    static {
        System.loadLibrary("HelloWorld");
    }

    public static void main(String[] args) {
        new JavaToC().helloC();
    }
}
Note two things in this program,

Use of native keyword. This is a method declaration and it informs the java compiler that the implementation 
for this method is a native one. This method helloC() is present in C source file and that is what we are going to call.

Loading the library HelloWorld using static keyword. This library file will be compiled out of the C source in the coming steps.

2. Generate header file from java class

JDK provides a tool named javah which can be used to generate the header file.

We will use the generated header file as include in C source.

Remember to compile the java program before using javah

javah JavaToC

Following is the header file generated,

/* DO NOT EDIT THIS FILE - it is machine generated */
#include
/* Header for class JavaToC */

#ifndef _Included_JavaToC
#define _Included_JavaToC
#ifdef __cplusplus
extern "C" {
#endif
/*
* Class:     JavaToC
* Method:    helloC
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_JavaToC_helloC
(JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
3. Write the C Program

#include 
#include 
#include "JavaToC.h"
JNIEXPORT void JNICALL Java_JavaToC_helloC(JNIEnv *env, jobject javaobj) 
{
	printf("Hello World: From C");
	return;
}
stdio.h is the standard C header file include.
jni.h is the header file that provides the java to C mapping and it is available in JDK.
JavaToC.h is the header file generated from the java source file.
4. Generate Shared Library File

Now compile the above C source file. We need a C compiler and I have chosen Tiny C.
Tiny C can be downloaded from http://mirror.veriportal.com/savannah//tinycc/tcc-0.9.25-win32-bin.zip
Download and unzip the file and set OS path to tcc.exe
tcc HelloWorld.C -I C:/Progra~1/Java/jdk1.7.0_07/include -I C:/Progra~1/Java/jdk1.7.0_07/include/win32 -shared -o HelloWorld.dll
Above is the command to generate the shared library file dll which is loaded in the java program. 
Two directories are included in the compile command, those are to include the jni.h and jni_md.h

5. Run Java Program

We are all set, now run the java program to get the following output,

<img src="JNI.png" alt="jni" style="width:400px;height:400px;">



   </h3> 
 <iframe width="600" height="400" src="https://www.youtube.com/embed/eTXd89t8ngI" frameborder="0" allowfullscreen></iframe>
 </pre> 
 </article>
  <footer>Copyright &copy; javainstances.com   2017</footer>
 
</body>
</html>